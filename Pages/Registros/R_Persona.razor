@page "/persona"
@page "/persona/{PersonaId:int}"

@inject PersonasBLL personasBll
@inject OcupacionesBLL ocupacionesBll
@inject NotificationService notifierSvc

<EditForm Model="personas" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header text-center">
            <h3>Registro de Personas</h3>
        </div>
        
        
            <div class="form-row align-items-center">
                <label>PersonaID</label>
                 <div class="input-group">
                    <InputNumber @bind-Value="personas.PersonaId" class="form-control col-4" />
                    <div class="input-group-append">
                        <button type="button" class="input-group-text btn btn-primary" @onclick="Buscar"> <i class="oi oi-magnifying-glass" /></button>
                    </div>
                </div>
            </div>
            
            <div class="form-group">
                <label>Nombres</label>
                <InputText @bind-Value="personas.Nombres" class="form-control" />
                <ValidationMessage For="@(() => personas.Nombres)" />
            </div>

            <div class="form-group">
                <label>Teléfono</label>
                <InputText @bind-Value="personas.Telefono" class="form-control" />
                <ValidationMessage For="@(() => personas.Telefono)" />
            </div>


             <div class="form-group">
                <label>Celular</label>
                <InputText @bind-Value="personas.Celular" class="form-control" />
                <ValidationMessage For="@(() => personas.Celular)" />
            </div>

             <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="personas.Email" class="form-control" />
                <ValidationMessage For="@(() => personas.Email)" />
            </div>

             <div class="form-group">
                <label>Dirección</label>
                <InputText @bind-Value="personas.Direccion" class="form-control" />
                <ValidationMessage For="@(() => personas.Direccion)" />
            </div>

             <div class="form-group">
                <label>Fecha de nacimiento</label>
                <InputDate @bind-Value="personas.FechaNacimiento" class="form-control" />
                <ValidationMessage For="@(() => personas.FechaNacimiento)" />
            </div>

            <div class="form-group">
                <label>Balance</label>
                <InputNumber @bind-Value="personas.Balance" class="form-control" />
                <ValidationMessage For="@(() => personas.Balance)" />
            </div>

            <label>Ocupacion</label>
            <InputSelect class="form-select text-14" @bind-Value="personas.OcupacionId">
                <option value="null"> </option>
                @foreach (var item in lista)
                {

                    <option value="@item.OcupacionId">@item.Descripcion</option>

                }
            </InputSelect>
            <ValidationMessage For="@(() =>personas.OcupacionId)" />
        </div>

        <div class="card-footer d-flex justify-content-center">
             <div class="border border-3 btn-group" role="group">
                <button type="button" class="btn btn-primary" @onclick="Nuevo"> <i class="oi oi-file" /> Nuevo</button>
                <button type="submit" class="btn btn-success"><i class="oi oi-document" /> Guardar</button>
                <button type="button" class="btn btn-danger" @onclick="Eliminar"><i class="oi oi-trash" />Eliminar</button>
            </div>

        </div>
</EditForm>

@code {

     [Parameter]

    public int PersonaId { get; set; }
    public Persona personas { get; set; } = new Persona();
    public int OcupacionId { get; set; }
    public Ocupaciones ocupacion { get; set; } = new Ocupaciones();
    public List<Ocupaciones> lista = new List<Ocupaciones>();
    
   protected async override Task OnInitializedAsync()
    {
        lista = await ocupacionesBll.GetOcupaciones(o => true);
        
        if (PersonaId > 0)
        {
            this.personas.PersonaId = PersonaId;
            await this.Buscar();
        }
    }

    private async Task Buscar()
    {
         if (personas.PersonaId > 0)
        {
            var encontrado = await personasBll.Buscar(personas.PersonaId);
            if (encontrado != null)
            {
                this.personas = encontrado;
                notifierSvc.ShowNotification("Registro encontrado", NotificationSeverity.Success);
            }
            else{
                notifierSvc.ShowNotification("Registro no encontrado", NotificationSeverity.Warning);
            }  
        }
    }

    public void Nuevo()
    {
        personas = new Persona();
        notifierSvc.ShowNotification("Nueva plantilla creada correctamente.", NotificationSeverity.Success);
        
    }

    public async Task Guardar()
    {
        var guardo = await personasBll.Guardar(personas);

        if (guardo)
        {
            Nuevo();
            notifierSvc.ShowNotification("Fue guardado correctamente.");
        }
        else
        {
            notifierSvc.ShowNotification("No fue guardado, intentar nuevamente.", NotificationSeverity.Error);
        }
    }
    public async Task Editar()
    {
        var editar = await personasBll.Editar(personas);

        if (editar)
        {
            Nuevo();
            notifierSvc.ShowNotification("Fue editado correctamente", NotificationSeverity.Success);

        }
        else
        {
            notifierSvc.ShowNotification("No fue editado correctamente", NotificationSeverity.Error);
        }
    }
    public async Task Eliminar()
    {
        var elimino = await personasBll.Eliminar(personas);
        if (elimino)
        {
            Nuevo();
            notifierSvc.ShowNotification("Fue eliminado correctamente.", NotificationSeverity.Success);
        }
        else
        {
            notifierSvc.ShowNotification("No fue Eliminado, intentar nuevamente.", NotificationSeverity.Error);
        }
    }
    
}

