@page "/persona"
@page "/persona/{PersonaId:int}"

@inject PersonasBLL personasBll
@inject OcupacionesBLL ocupacionesBll
@inject NotificationService notifierSvc

<EditForm Model="personas" OnValidSubmit="Guardar">

    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header text-center">
            <h3>Registro de Personas</h3>
        </div>
        
        
            <div class="form-row align-items-center">
                <label>PersonaID</label>
                 <div class="input-group">
                    <InputNumber @bind-Value="personas.PersonaId" class="form-control col-4" />
                    <div class="input-group-append">
                        <button type="button" class="input-group-text btn btn-primary" @onclick="Buscar"> <i class="oi oi-magnifying-glass" /></button>
                    </div>
                </div>
            </div>
            
            <div class="form-group">
                <label>Nombres</label>
                <InputText @bind-Value="personas.Nombres" class="form-control" />
                <ValidationMessage For="@(() => personas.Nombres)" />
            </div>

            <div class="form-group">
                <label>Teléfono</label>
                <InputText @bind-Value="personas.Telefono" class="form-control" />
                <ValidationMessage For="@(() => personas.Telefono)" />
            </div>


             <div class="form-group">
                <label>Celular</label>
                <InputText @bind-Value="personas.Celular" class="form-control" />
                <ValidationMessage For="@(() => personas.Celular)" />
            </div>

             <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="personas.Email" class="form-control" />
                <ValidationMessage For="@(() => personas.Email)" />
            </div>

             <div class="form-group">
                <label>Dirección</label>
                <InputText @bind-Value="personas.Direccion" class="form-control" />
                <ValidationMessage For="@(() => personas.Direccion)" />
            </div>

             <div class="form-group">
                <label>Fecha de nacimiento</label>
                <InputDate @bind-Value="personas.FechaNacimiento" class="form-control" />
                <ValidationMessage For="@(() => personas.FechaNacimiento)" />
            </div>

            <div class="form-group">
                <label>Balance</label>
                <InputNumber @bind-Value="personas.Balance" class="form-control" />
                <ValidationMessage For="@(() => personas.Balance)" />
            </div>

            <label>Ocupacion</label>
            <InputSelect class="form-select text-14" @bind-Value="personas.OcupacionId">
                <option value="null"> </option>
                @foreach (var item in lista)
                {

                    <option value="@item.OcupacionId">@item.Descripcion</option>

                }
            </InputSelect>
            <ValidationMessage For="@(() =>personas.OcupacionId)" />
        </div>

        <div class="card-footer d-flex justify-content-center">
             <div class="border border-3 btn-group" role="group">
                <button type="button" class="bi bi-file-earmark-fill btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>
                <button type="submit" class="bi bi-file-earmark-text-fill btn btn-lg btn-success"@onclick="Guardar">Guardar</button>
                <button type="button" class="bi bi-trash btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>
            </div>

        </div>
</EditForm>

@code {

     [Parameter]

    public int PersonaId { get; set; }
    public Persona personas { get; set; } = new Persona();
    public int OcupacionId { get; set; }
    public Ocupaciones ocupacion { get; set; } = new Ocupaciones();
    public List<Ocupaciones> lista = new List<Ocupaciones>();
     public String mensaje { get; set; } = "";
    
    protected override void OnInitialized()
    {
        if(PersonaId > 0)
        {
            this.personas.OcupacionId = PersonaId;
            this.Buscar();
        }

        lista = personasBll.GetOcupaciones(c => true);
    }
    
    public void Buscar()
    {
         if (personas.PersonaId > 0 || ocupacion.OcupacionId > 0)
        {
            var encontrado = personasBll.Buscar(personas.PersonaId);

            if (encontrado != null)
                this.personas = encontrado;
                ShowNotification(
                new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Se encontraron los datos correctamente"
                });
            }
            else{
                ShowNotification(
                new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Registro no encontrado"
                });
            }
        }

    public void Nuevo()
    {
        mensaje = "";
        this.personas = new Persona();
        ShowNotification(
        new NotificationMessage
        {
            Severity = NotificationSeverity.Success,
            Summary = "Nueva plantilla creada correctamente"
        });
    }

    public void Guardar()
    {
       var guardado = personasBll.Guardar(personas);

        if (guardado)
        {
            Nuevo();
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Guardado correctamente"
            });
        }
        else
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "No fue guardado, intentar nuevamente."
            });
           
        }
    }

    public void Eliminar()
    {
        var elimino = personasBll.Eliminar(personas);
        if (elimino)
        {
            Nuevo();
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Eliminado correctamente"
            });
        }
        else
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "No fue eliminado, intentar nuevamente."
            });
        }
    }
    void ShowNotification(NotificationMessage message)
    {
        notifierSvc.Notify(message);
    }
}
