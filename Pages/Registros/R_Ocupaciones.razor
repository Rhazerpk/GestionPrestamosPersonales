@page "/ocupacion"
@page "/ocupacion/{OcupacionId:int}"
@inject OcupacionesBLL ocupacionesBll
@inject NotificationService notifierSvc

<EditForm Model="ocupacion" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h3>Registro de Ocupaciones</h3>
        </div>
        
            <div class="form-row align-items-center">
                <label>OcupacionID</label>
                 <div class="input-group">
                    <InputNumber @bind-Value="ocupacion.OcupacionId" class="form-control col-4" />
                    <div class="input-group-append">
                        <button type="button" class="input-group-text btn btn-primary" @onclick="Buscar"> <i class="oi oi-magnifying-glass" /></button>
                    </div>
                </div>
            </div>
            
            <div class="form-group">
                <label>Descripción</label>
                <InputText @bind-Value="ocupacion.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => ocupacion.Descripcion)" />
            </div>

            <div class="form-group">
                <label>Salario</label>
                <InputNumber @bind-Value="ocupacion.Salario" class="form-control" />
                <ValidationMessage For="@(() => ocupacion.Salario)" />
            </div>
        </div>
        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="bi bi-file-earmark-fill btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>
                <button type="submit" class="bi bi-file-earmark-text-fill btn btn-lg btn-success"@onclick="Guardar">Guardar</button>
                <button type="button" class="bi bi-trash btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>
            </div>

        </div>
</EditForm>

@code {

    [Parameter]

    public int OcupacionId { get; set; }
    public Ocupaciones ocupacion { get; set; } = new Ocupaciones();
    public String mensaje { get; set; } = "";
    
   protected async override Task OnInitializedAsync()
    {
        if (OcupacionId > 0)
        {
            this.ocupacion.OcupacionId = OcupacionId;
            await this.Buscar();
        }
    }

    private async Task Buscar()
    {
         if (ocupacion.OcupacionId > 0)
        {
            var encontrado = await ocupacionesBll.Buscar(ocupacion.OcupacionId);
            if (encontrado != null){
                this.ocupacion = encontrado;

                ShowNotification(
                new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Se encontraron los datos correctamente"
                });
            }

            else
            {
                ShowNotification(
                new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Registro no encontrado"
                });
            }
        }
    }

    public void Nuevo()
    {
        mensaje = "";
        ocupacion = new Ocupaciones();
        
        ShowNotification(
        new NotificationMessage
        {
            Severity = NotificationSeverity.Success,
            Summary = "Nueva plantilla creada correctamente"
        });

    }

    public async Task Guardar()
    {

        var guardo = await ocupacionesBll.Guardar(ocupacion);
        if (guardo)
        {
            Nuevo();
            
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Guardado correctamente"
            });
        }
        else
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "No fue guardado, intentar nuevamente."
            });
           
        }
    }

    public async Task Editar()
    {
        var editar = await ocupacionesBll.Editar(ocupacion);

        if (editar)
        {
            Nuevo();
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Editado correctamente"
            });
        }
        else
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "No fue editado, intentar nuevamente."
            });
        }
    }
    public async Task Eliminar()
    {
        var elimino = await ocupacionesBll.Eliminar(ocupacion);

        if (elimino)
        {
            Nuevo();

            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Eliminado correctamente"
            });
        }

        else
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "No fue eliminado, intentar nuevamente."
            });
        }
       
    }
    void ShowNotification(NotificationMessage message)
    {
        notifierSvc.Notify(message);
    }
}
